{"ast":null,"code":"// import { Avatar, Button, Dialog, Typography } from '@mui/material';\n// import React, { useEffect, useState } from 'react'\n// import { Link, useParams } from 'react-router-dom';\n// import Post from '../Post/Post';\n// import Loader from '../Loader/Loader';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { useAlert } from 'react-alert';\n// import User from '../User/User';\n// import { getUserProfile} from '../../Actions/Users';\n\n// const UserProfile = () => {\n//   const dispatch=useDispatch();\n//   const alert=useAlert();\n\n//   const {user,loading:userloading}=useSelector(state=>state.user);\n//   const {userProfile,loading:userProfileloading}=useSelector(state=>state.like);\n//   const {loading,error,posts}=useSelector(state=>state.myPost);\n//   const {error:likeError,message,loading: deleteLoading,}=useSelector(state=>state.like);\n//   const [followersToggle,setFollowersToggle]=useState(false);\n//   const [followingToggle,setFollowingToggle]=useState(false);\n//   const [following,setFollowing]=useState(false);\n//   const [isProfile,setIsProfile]=useState(false);\n\n//   const params=useParams();\n\n//   useEffect(() => {\n//       if(user._id===params.id){\n//            setIsProfile(true)\n//       }\n\n//       dispatch(getUserProfile(params.id))\n//   }, [dispatch,user.id,params.id])\n\n//     useEffect(() => {\n//          if(error){\n//           alert.error(error);\n//           dispatch({\n//              type:\"clearErrors\"\n//           })\n//          }\n//          if(likeError){\n//             alert.error(likeError)\n//             dispatch({\n//                 type:'clearErrors'\n//             })\n//          }\n//          if(message){\n//             alert.success(message)\n//             dispatch({\n//                 type:'clearMessage'\n//             })\n//          }\n//     }, [alert,error,likeError,message,dispatch])\n\n//   return (\n//       loading===true || userloading===true?<Loader/>:(\n//         <div className='account'>\n//               <div className='accountLeft'>\n//                      {\n//                     posts && posts.length>0?posts.map((post)=>(\n//                          <Post  \n//                                 key={post._id}\n//                                 postId={post._id}\n//                                 caption={post.caption}\n//                                 postImage={post.imageUrl.url}\n//                                 likes = {post.likes}\n//                                 comments = {post.comments}\n//                                 ownerImage={post.owner.avatar.url}\n//                                 ownerName={post.owner.name}\n//                                 ownerId={post.owner._id}\n//                                 isDelete = {true}\n//                                 isAccount = {true}\n//                          />\n//                     )):<Typography variant='h6' margin='2vmax'>No posts available</Typography>\n//                   }\n//               </div>\n//               <div className='accountright'>\n//                    <Avatar src={userProfile.avatar.url}  sx={{height:\"7vmax\",width:\"7vmax\"}} marginTop={\"2vmax\"}/>\n//                    <Typography variant=\"h6\" marginTop={\"1vmax\"} color={'#3B3B3B'} marginBottom={\"2vmax\"}>{userProfile.name}</Typography>\n//                    <div className='a'>\n//                       <button onClick={()=>setFollowingToggle(!followingToggle)}>Following {user.following.length}</button>\n//                    </div>\n//                     <div className='a'>\n//                       <button onClick={()=>setFollowersToggle(!followersToggle)}>Followers {user.followers.length}</button>\n//                    </div>\n//                     <div className='a'>\n//                        Posts {userProfile.posts.length}\n//                    </div>\n//                   {\n//                     isProfile?null: <Button variant=\"contained\" onClick={()=>setFollowing(!following)} style={{backgroundColor:following?\"red\":\"\"}}>{\n//                        following?\"UnFollow\":\"Follow\"\n//                    }</Button>\n//                   }\n\n//                     {/* DialogBox for followers */}\n//                     <Dialog open={followersToggle} onClose={() => { setFollowersToggle(!followersToggle) }}>\n//                         <div className='dialogBox'>\n//                            <Typography variant='h6'>Followers</Typography>\n//                     {\n//                          user && user.followers.length>0?user.followers.map((follower)=>(\n//                               <User key={follower._id} name={follower.name} avatar={follower.avatar.url} userId={follower._id} />\n//                          )):<Typography style={{margin:'2vmax'}}>No Followers present</Typography>\n//                     }\n//                 </div>\n//             </Dialog>\n\n//              {/* DialogBox for following */}\n//                     <Dialog open={followingToggle} onClose={() => { setFollowingToggle(!followingToggle) }}>\n//                         <div className='dialogBox'>\n//                            <Typography variant='h6'>Following</Typography>\n//                     {\n//                          user && user.following.length>0?user.following.map((follow)=>(\n//                               <User key={follow._id} name={follow.name} avatar={follow.avatar.url} userId={follow._id} />\n//                          )):<Typography style={{margin:'2vmax'}}>User has not made any posts</Typography>\n//                     }\n//                 </div>\n//             </Dialog>\n//               </div>\n//         </div>\n//       )\n//   )\n// }\n\nexport default UserProfile;","map":{"version":3,"names":["UserProfile"],"sources":["C:/MERN/Social_media/frontend/src/Components/UserProfile/UserProfile.jsx"],"sourcesContent":["// import { Avatar, Button, Dialog, Typography } from '@mui/material';\r\n// import React, { useEffect, useState } from 'react'\r\n// import { Link, useParams } from 'react-router-dom';\r\n// import Post from '../Post/Post';\r\n// import Loader from '../Loader/Loader';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { useAlert } from 'react-alert';\r\n// import User from '../User/User';\r\n// import { getUserProfile} from '../../Actions/Users';\r\n\r\n// const UserProfile = () => {\r\n//   const dispatch=useDispatch();\r\n//   const alert=useAlert();\r\n\r\n//   const {user,loading:userloading}=useSelector(state=>state.user);\r\n//   const {userProfile,loading:userProfileloading}=useSelector(state=>state.like);\r\n//   const {loading,error,posts}=useSelector(state=>state.myPost);\r\n//   const {error:likeError,message,loading: deleteLoading,}=useSelector(state=>state.like);\r\n//   const [followersToggle,setFollowersToggle]=useState(false);\r\n//   const [followingToggle,setFollowingToggle]=useState(false);\r\n//   const [following,setFollowing]=useState(false);\r\n//   const [isProfile,setIsProfile]=useState(false);\r\n  \r\n//   const params=useParams();\r\n\r\n//   useEffect(() => {\r\n//       if(user._id===params.id){\r\n//            setIsProfile(true)\r\n//       }\r\n  \r\n//       dispatch(getUserProfile(params.id))\r\n//   }, [dispatch,user.id,params.id])\r\n    \r\n\r\n//     useEffect(() => {\r\n//          if(error){\r\n//           alert.error(error);\r\n//           dispatch({\r\n//              type:\"clearErrors\"\r\n//           })\r\n//          }\r\n//          if(likeError){\r\n//             alert.error(likeError)\r\n//             dispatch({\r\n//                 type:'clearErrors'\r\n//             })\r\n//          }\r\n//          if(message){\r\n//             alert.success(message)\r\n//             dispatch({\r\n//                 type:'clearMessage'\r\n//             })\r\n//          }\r\n//     }, [alert,error,likeError,message,dispatch])\r\n  \r\n//   return (\r\n//       loading===true || userloading===true?<Loader/>:(\r\n//         <div className='account'>\r\n//               <div className='accountLeft'>\r\n//                      {\r\n//                     posts && posts.length>0?posts.map((post)=>(\r\n//                          <Post  \r\n//                                 key={post._id}\r\n//                                 postId={post._id}\r\n//                                 caption={post.caption}\r\n//                                 postImage={post.imageUrl.url}\r\n//                                 likes = {post.likes}\r\n//                                 comments = {post.comments}\r\n//                                 ownerImage={post.owner.avatar.url}\r\n//                                 ownerName={post.owner.name}\r\n//                                 ownerId={post.owner._id}\r\n//                                 isDelete = {true}\r\n//                                 isAccount = {true}\r\n//                          />\r\n//                     )):<Typography variant='h6' margin='2vmax'>No posts available</Typography>\r\n//                   }\r\n//               </div>\r\n//               <div className='accountright'>\r\n//                    <Avatar src={userProfile.avatar.url}  sx={{height:\"7vmax\",width:\"7vmax\"}} marginTop={\"2vmax\"}/>\r\n//                    <Typography variant=\"h6\" marginTop={\"1vmax\"} color={'#3B3B3B'} marginBottom={\"2vmax\"}>{userProfile.name}</Typography>\r\n//                    <div className='a'>\r\n//                       <button onClick={()=>setFollowingToggle(!followingToggle)}>Following {user.following.length}</button>\r\n//                    </div>\r\n//                     <div className='a'>\r\n//                       <button onClick={()=>setFollowersToggle(!followersToggle)}>Followers {user.followers.length}</button>\r\n//                    </div>\r\n//                     <div className='a'>\r\n//                        Posts {userProfile.posts.length}\r\n//                    </div>\r\n//                   {\r\n//                     isProfile?null: <Button variant=\"contained\" onClick={()=>setFollowing(!following)} style={{backgroundColor:following?\"red\":\"\"}}>{\r\n//                        following?\"UnFollow\":\"Follow\"\r\n//                    }</Button>\r\n//                   }\r\n\r\n//                     {/* DialogBox for followers */}\r\n//                     <Dialog open={followersToggle} onClose={() => { setFollowersToggle(!followersToggle) }}>\r\n//                         <div className='dialogBox'>\r\n//                            <Typography variant='h6'>Followers</Typography>\r\n//                     {\r\n//                          user && user.followers.length>0?user.followers.map((follower)=>(\r\n//                               <User key={follower._id} name={follower.name} avatar={follower.avatar.url} userId={follower._id} />\r\n//                          )):<Typography style={{margin:'2vmax'}}>No Followers present</Typography>\r\n//                     }\r\n//                 </div>\r\n//             </Dialog>\r\n\r\n//              {/* DialogBox for following */}\r\n//                     <Dialog open={followingToggle} onClose={() => { setFollowingToggle(!followingToggle) }}>\r\n//                         <div className='dialogBox'>\r\n//                            <Typography variant='h6'>Following</Typography>\r\n//                     {\r\n//                          user && user.following.length>0?user.following.map((follow)=>(\r\n//                               <User key={follow._id} name={follow.name} avatar={follow.avatar.url} userId={follow._id} />\r\n//                          )):<Typography style={{margin:'2vmax'}}>User has not made any posts</Typography>\r\n//                     }\r\n//                 </div>\r\n//             </Dialog>\r\n//               </div>\r\n//         </div>\r\n//       )\r\n//   )\r\n// }\r\n\r\n\r\n\r\n\r\nexport default UserProfile;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,eAAeA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}