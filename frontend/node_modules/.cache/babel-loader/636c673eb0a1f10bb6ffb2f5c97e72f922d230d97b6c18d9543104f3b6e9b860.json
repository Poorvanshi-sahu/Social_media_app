{"ast":null,"code":"var _jsxFileName = \"C:\\\\MERN\\\\Social_media\\\\frontend\\\\src\\\\Components\\\\UserProfile\\\\UserProfile.jsx\",\n  _s = $RefreshSig$();\nimport { Avatar, Button, Dialog, Typography } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport Post from '../Post/Post';\nimport Loader from '../Loader/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useAlert } from 'react-alert';\nimport User from '../User/User';\nimport { LogOutUser, deleteProfile, getUserProfile, myAllPosts } from '../../Actions/Users';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserProfile = () => {\n  _s();\n  // const dispatch=useDispatch();\n  // const alert=useAlert();\n\n  // const {user,loading:userloading}=useSelector(state=>state.user);\n  // const {userProfile,loading:userProfileloading}=useSelector(state=>state.like);\n  // const {loading,error,posts}=useSelector(state=>state.myPost);\n  // const {error:likeError,message,loading: deleteLoading,}=useSelector(state=>state.like);\n  // const [followersToggle,setFollowersToggle]=useState(false);\n  // const [followingToggle,setFollowingToggle]=useState(false);\n  // const [following,setFollowing]=useState(false);\n  // const [isProfile,setIsProfile]=useState(false);\n\n  // const params=useParams();\n\n  // useEffect(() => {\n  //     if(user._id===params.id){\n  //          setIsProfile(true)\n  //     }\n  // }, [dispatch,user.id,params.id])\n\n  //   useEffect(() => {\n  //        if(error){\n  //         alert.error(error);\n  //         dispatch({\n  //            type:\"clearErrors\"\n  //         })\n  //        }\n  //        if(likeError){\n  //           alert.error(likeError)\n  //           dispatch({\n  //               type:'clearErrors'\n  //           })\n  //        }\n  //        if(message){\n  //           alert.success(message)\n  //           dispatch({\n  //               type:'clearMessage'\n  //           })\n  //        }\n  //        console.log(\"haaaaaaaa\")\n  //   }, [alert,error,likeError,message,dispatch])/\n\n  const dispatch = useDispatch();\n  const alert = useAlert();\n  const {\n    user,\n    loading: userloading\n  } = useSelector(state => state.user);\n  const {\n    loading,\n    error,\n    posts\n  } = useSelector(state => state.myPost);\n  const {\n    error: likeError,\n    message,\n    loading: deleteLoading\n  } = useSelector(state => state.like);\n  const [followersToggle, setFollowersToggle] = useState(false);\n  const [followingToggle, setFollowingToggle] = useState(false);\n  const logOutHandler = async () => {\n    await dispatch(LogOutUser());\n    alert.success(\"Logged Out Successfully\");\n  };\n  const deleteHandler = async () => {\n    await dispatch(deleteProfile());\n    dispatch(LogOutUser());\n  };\n  useEffect(() => {\n    dispatch(myAllPosts());\n  }, [dispatch]);\n  useEffect(() => {\n    if (error) {\n      alert.error(error);\n      dispatch({\n        type: \"clearErrors\"\n      });\n    }\n    if (likeError) {\n      alert.error(likeError);\n      dispatch({\n        type: 'clearErrors'\n      });\n    }\n    if (message) {\n      alert.success(message);\n      dispatch({\n        type: 'clearMessage'\n      });\n    }\n  }, [alert, error, likeError, message, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"ha bhai me hu\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this)\n  // loading===true || userloading===true?<Loader/>:(\n  //   <div className='account'>\n  //         <div className='accountLeft'>\n  //                {\n  //               posts && posts.length>0?posts.map((post)=>(\n  //                    <Post  \n  //                           key={post._id}\n  //                           postId={post._id}\n  //                           caption={post.caption}\n  //                           postImage={post.imageUrl.url}\n  //                           likes = {post.likes}\n  //                           comments = {post.comments}\n  //                           ownerImage={post.owner.avatar.url}\n  //                           ownerName={post.owner.name}\n  //                           ownerId={post.owner._id}\n  //                           isDelete = {true}\n  //                           isAccount = {true}\n  //                    />\n  //               )):<Typography variant='h6' margin='2vmax'>No posts available</Typography>\n  //             }\n  //         </div>\n  //         <div className='accountright'>\n  //              <Avatar src={userProfile.avatar.url}  sx={{height:\"7vmax\",width:\"7vmax\"}} marginTop={\"2vmax\"}/>\n  //              <Typography variant=\"h6\" marginTop={\"1vmax\"} color={'#3B3B3B'} marginBottom={\"2vmax\"}>{userProfile.name}</Typography>\n  //              <div className='a'>\n  //                 <button onClick={()=>setFollowingToggle(!followingToggle)}>Following {user.following.length}</button>\n  //              </div>\n  //               <div className='a'>\n  //                 <button onClick={()=>setFollowersToggle(!followersToggle)}>Followers {user.followers.length}</button>\n  //              </div>\n  //               <div className='a'>\n  //                  Posts {userProfile.posts.length}\n  //              </div>\n  //             {\n  //               isProfile?null: <Button variant=\"contained\" onClick={()=>setFollowing(!following)} style={{backgroundColor:following?\"red\":\"\"}}>{\n  //                  following?\"UnFollow\":\"Follow\"\n  //              }</Button>\n  //             }\n\n  //               {/* DialogBox for followers */}\n  //               <Dialog open={followersToggle} onClose={() => { setFollowersToggle(!followersToggle) }}>\n  //                   <div className='dialogBox'>\n  //                      <Typography variant='h6'>Followers</Typography>\n  //               {\n  //                    user && user.followers.length>0?user.followers.map((follower)=>(\n  //                         <User key={follower._id} name={follower.name} avatar={follower.avatar.url} userId={follower._id} />\n  //                    )):<Typography style={{margin:'2vmax'}}>No Followers present</Typography>\n  //               }\n  //           </div>\n  //       </Dialog>\n\n  //        {/* DialogBox for following */}\n  //               <Dialog open={followingToggle} onClose={() => { setFollowingToggle(!followingToggle) }}>\n  //                   <div className='dialogBox'>\n  //                      <Typography variant='h6'>Following</Typography>\n  //               {\n  //                    user && user.following.length>0?user.following.map((follow)=>(\n  //                         <User key={follow._id} name={follow.name} avatar={follow.avatar.url} userId={follow._id} />\n  //                    )):<Typography style={{margin:'2vmax'}}>User has not made any posts</Typography>\n  //               }\n  //           </div>\n  //       </Dialog>\n  //         </div>\n  //   </div>\n  // )\n  ;\n};\n_s(UserProfile, \"lbZtUa6S9+fy6u9yPAqHEuplkIA=\", false, function () {\n  return [useDispatch, useAlert, useSelector, useSelector, useSelector];\n});\n_c = UserProfile;\nexport default UserProfile;\nvar _c;\n$RefreshReg$(_c, \"UserProfile\");","map":{"version":3,"names":["Avatar","Button","Dialog","Typography","React","useEffect","useState","Link","useParams","Post","Loader","useDispatch","useSelector","useAlert","User","LogOutUser","deleteProfile","getUserProfile","myAllPosts","jsxDEV","_jsxDEV","UserProfile","_s","dispatch","alert","user","loading","userloading","state","error","posts","myPost","likeError","message","deleteLoading","like","followersToggle","setFollowersToggle","followingToggle","setFollowingToggle","logOutHandler","success","deleteHandler","type","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/MERN/Social_media/frontend/src/Components/UserProfile/UserProfile.jsx"],"sourcesContent":["import { Avatar, Button, Dialog, Typography } from '@mui/material';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport Post from '../Post/Post';\r\nimport Loader from '../Loader/Loader';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useAlert } from 'react-alert';\r\nimport User from '../User/User';\r\nimport { LogOutUser, deleteProfile, getUserProfile, myAllPosts} from '../../Actions/Users';\r\n\r\nconst UserProfile = () => {\r\n  // const dispatch=useDispatch();\r\n  // const alert=useAlert();\r\n\r\n  // const {user,loading:userloading}=useSelector(state=>state.user);\r\n  // const {userProfile,loading:userProfileloading}=useSelector(state=>state.like);\r\n  // const {loading,error,posts}=useSelector(state=>state.myPost);\r\n  // const {error:likeError,message,loading: deleteLoading,}=useSelector(state=>state.like);\r\n  // const [followersToggle,setFollowersToggle]=useState(false);\r\n  // const [followingToggle,setFollowingToggle]=useState(false);\r\n  // const [following,setFollowing]=useState(false);\r\n  // const [isProfile,setIsProfile]=useState(false);\r\n  \r\n  // const params=useParams();\r\n\r\n  // useEffect(() => {\r\n  //     if(user._id===params.id){\r\n  //          setIsProfile(true)\r\n  //     }\r\n  // }, [dispatch,user.id,params.id])\r\n    \r\n\r\n  //   useEffect(() => {\r\n  //        if(error){\r\n  //         alert.error(error);\r\n  //         dispatch({\r\n  //            type:\"clearErrors\"\r\n  //         })\r\n  //        }\r\n  //        if(likeError){\r\n  //           alert.error(likeError)\r\n  //           dispatch({\r\n  //               type:'clearErrors'\r\n  //           })\r\n  //        }\r\n  //        if(message){\r\n  //           alert.success(message)\r\n  //           dispatch({\r\n  //               type:'clearMessage'\r\n  //           })\r\n  //        }\r\n  //        console.log(\"haaaaaaaa\")\r\n  //   }, [alert,error,likeError,message,dispatch])/\r\n\r\n  const dispatch=useDispatch();\r\n  const alert=useAlert();\r\n\r\n  const {user,loading:userloading}=useSelector(state=>state.user);\r\n  const {loading,error,posts}=useSelector(state=>state.myPost);\r\n  const {error:likeError,message,loading: deleteLoading,}=useSelector(state=>state.like);\r\n  const [followersToggle,setFollowersToggle]=useState(false);\r\n  const [followingToggle,setFollowingToggle]=useState(false);\r\n \r\n  const logOutHandler=async()=>{\r\n       await dispatch(LogOutUser());\r\n       alert.success(\"Logged Out Successfully\");\r\n  }\r\n\r\n  const deleteHandler=async()=>{\r\n       await dispatch(deleteProfile())\r\n       dispatch(LogOutUser());\r\n  }\r\n   \r\n    useEffect(() => {\r\n           dispatch(myAllPosts());\r\n     }, [dispatch])\r\n\r\n    useEffect(() => {\r\n         if(error){\r\n          alert.error(error);\r\n          dispatch({\r\n             type:\"clearErrors\"\r\n          })\r\n         }\r\n         if(likeError){\r\n            alert.error(likeError)\r\n            dispatch({\r\n                type:'clearErrors'\r\n            })\r\n         }\r\n         if(message){\r\n            alert.success(message)\r\n            dispatch({\r\n                type:'clearMessage'\r\n            })\r\n         }\r\n    \r\n    }, [alert,error,likeError,message,dispatch])\r\n  \r\n  return (\r\n    <h1>ha bhai me hu</h1>\r\n      // loading===true || userloading===true?<Loader/>:(\r\n      //   <div className='account'>\r\n      //         <div className='accountLeft'>\r\n      //                {\r\n      //               posts && posts.length>0?posts.map((post)=>(\r\n      //                    <Post  \r\n      //                           key={post._id}\r\n      //                           postId={post._id}\r\n      //                           caption={post.caption}\r\n      //                           postImage={post.imageUrl.url}\r\n      //                           likes = {post.likes}\r\n      //                           comments = {post.comments}\r\n      //                           ownerImage={post.owner.avatar.url}\r\n      //                           ownerName={post.owner.name}\r\n      //                           ownerId={post.owner._id}\r\n      //                           isDelete = {true}\r\n      //                           isAccount = {true}\r\n      //                    />\r\n      //               )):<Typography variant='h6' margin='2vmax'>No posts available</Typography>\r\n      //             }\r\n      //         </div>\r\n      //         <div className='accountright'>\r\n      //              <Avatar src={userProfile.avatar.url}  sx={{height:\"7vmax\",width:\"7vmax\"}} marginTop={\"2vmax\"}/>\r\n      //              <Typography variant=\"h6\" marginTop={\"1vmax\"} color={'#3B3B3B'} marginBottom={\"2vmax\"}>{userProfile.name}</Typography>\r\n      //              <div className='a'>\r\n      //                 <button onClick={()=>setFollowingToggle(!followingToggle)}>Following {user.following.length}</button>\r\n      //              </div>\r\n      //               <div className='a'>\r\n      //                 <button onClick={()=>setFollowersToggle(!followersToggle)}>Followers {user.followers.length}</button>\r\n      //              </div>\r\n      //               <div className='a'>\r\n      //                  Posts {userProfile.posts.length}\r\n      //              </div>\r\n      //             {\r\n      //               isProfile?null: <Button variant=\"contained\" onClick={()=>setFollowing(!following)} style={{backgroundColor:following?\"red\":\"\"}}>{\r\n      //                  following?\"UnFollow\":\"Follow\"\r\n      //              }</Button>\r\n      //             }\r\n\r\n      //               {/* DialogBox for followers */}\r\n      //               <Dialog open={followersToggle} onClose={() => { setFollowersToggle(!followersToggle) }}>\r\n      //                   <div className='dialogBox'>\r\n      //                      <Typography variant='h6'>Followers</Typography>\r\n      //               {\r\n      //                    user && user.followers.length>0?user.followers.map((follower)=>(\r\n      //                         <User key={follower._id} name={follower.name} avatar={follower.avatar.url} userId={follower._id} />\r\n      //                    )):<Typography style={{margin:'2vmax'}}>No Followers present</Typography>\r\n      //               }\r\n      //           </div>\r\n      //       </Dialog>\r\n\r\n      //        {/* DialogBox for following */}\r\n      //               <Dialog open={followingToggle} onClose={() => { setFollowingToggle(!followingToggle) }}>\r\n      //                   <div className='dialogBox'>\r\n      //                      <Typography variant='h6'>Following</Typography>\r\n      //               {\r\n      //                    user && user.following.length>0?user.following.map((follow)=>(\r\n      //                         <User key={follow._id} name={follow.name} avatar={follow.avatar.url} userId={follow._id} />\r\n      //                    )):<Typography style={{margin:'2vmax'}}>User has not made any posts</Typography>\r\n      //               }\r\n      //           </div>\r\n      //       </Dialog>\r\n      //         </div>\r\n      //   </div>\r\n      // )\r\n  )\r\n}\r\n\r\nexport default UserProfile;"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,UAAU,QAAQ,eAAe;AAClE,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,EAAEC,SAAS,QAAQ,kBAAkB;AAClD,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,MAAM,MAAM,kBAAkB;AACrC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,IAAI,MAAM,cAAc;AAC/B,SAASC,UAAU,EAAEC,aAAa,EAAEC,cAAc,EAAEC,UAAU,QAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3F,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,QAAQ,GAACZ,WAAW,EAAE;EAC5B,MAAMa,KAAK,GAACX,QAAQ,EAAE;EAEtB,MAAM;IAACY,IAAI;IAACC,OAAO,EAACC;EAAW,CAAC,GAACf,WAAW,CAACgB,KAAK,IAAEA,KAAK,CAACH,IAAI,CAAC;EAC/D,MAAM;IAACC,OAAO;IAACG,KAAK;IAACC;EAAK,CAAC,GAAClB,WAAW,CAACgB,KAAK,IAAEA,KAAK,CAACG,MAAM,CAAC;EAC5D,MAAM;IAACF,KAAK,EAACG,SAAS;IAACC,OAAO;IAACP,OAAO,EAAEQ;EAAc,CAAC,GAACtB,WAAW,CAACgB,KAAK,IAAEA,KAAK,CAACO,IAAI,CAAC;EACtF,MAAM,CAACC,eAAe,EAACC,kBAAkB,CAAC,GAAC/B,QAAQ,CAAC,KAAK,CAAC;EAC1D,MAAM,CAACgC,eAAe,EAACC,kBAAkB,CAAC,GAACjC,QAAQ,CAAC,KAAK,CAAC;EAE1D,MAAMkC,aAAa,GAAC,MAAAA,CAAA,KAAS;IACxB,MAAMjB,QAAQ,CAACR,UAAU,EAAE,CAAC;IAC5BS,KAAK,CAACiB,OAAO,CAAC,yBAAyB,CAAC;EAC7C,CAAC;EAED,MAAMC,aAAa,GAAC,MAAAA,CAAA,KAAS;IACxB,MAAMnB,QAAQ,CAACP,aAAa,EAAE,CAAC;IAC/BO,QAAQ,CAACR,UAAU,EAAE,CAAC;EAC3B,CAAC;EAECV,SAAS,CAAC,MAAM;IACTkB,QAAQ,CAACL,UAAU,EAAE,CAAC;EAC5B,CAAC,EAAE,CAACK,QAAQ,CAAC,CAAC;EAEflB,SAAS,CAAC,MAAM;IACX,IAAGwB,KAAK,EAAC;MACRL,KAAK,CAACK,KAAK,CAACA,KAAK,CAAC;MAClBN,QAAQ,CAAC;QACNoB,IAAI,EAAC;MACR,CAAC,CAAC;IACH;IACA,IAAGX,SAAS,EAAC;MACVR,KAAK,CAACK,KAAK,CAACG,SAAS,CAAC;MACtBT,QAAQ,CAAC;QACLoB,IAAI,EAAC;MACT,CAAC,CAAC;IACL;IACA,IAAGV,OAAO,EAAC;MACRT,KAAK,CAACiB,OAAO,CAACR,OAAO,CAAC;MACtBV,QAAQ,CAAC;QACLoB,IAAI,EAAC;MACT,CAAC,CAAC;IACL;EAEL,CAAC,EAAE,CAACnB,KAAK,EAACK,KAAK,EAACG,SAAS,EAACC,OAAO,EAACV,QAAQ,CAAC,CAAC;EAE9C,oBACEH,OAAA;IAAAwB,QAAA,EAAI;EAAa;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;EACf;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;AAEN,CAAC;AAAA1B,EAAA,CA7JKD,WAAW;EAAA,QA4CAV,WAAW,EACdE,QAAQ,EAEaD,WAAW,EAChBA,WAAW,EACiBA,WAAW;AAAA;AAAAqC,EAAA,GAjD/D5B,WAAW;AA+JjB,eAAeA,WAAW;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}