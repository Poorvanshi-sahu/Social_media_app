{"ast":null,"code":"var _jsxFileName = \"C:\\\\MERN\\\\Social_media\\\\frontend\\\\src\\\\Components\\\\UserProfile\\\\UserProfile.jsx\",\n  _s = $RefreshSig$();\nimport { Avatar, Button, Dialog, Typography } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport Post from '../Post/Post';\nimport Loader from '../Loader/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useAlert } from 'react-alert';\nimport User from '../User/User';\nimport { getUserProfile } from '../../Actions/Users';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserProfile = () => {\n  _s();\n  const dispatch = useDispatch();\n  const alert = useAlert();\n  const {\n    user,\n    loading: userloading\n  } = useSelector(state => state.user);\n  const {\n    userProfile,\n    loading: userProfileloading\n  } = useSelector(state => state.like);\n  const {\n    loading,\n    error,\n    posts\n  } = useSelector(state => state.myPost);\n  const {\n    error: likeError,\n    message,\n    loading: deleteLoading\n  } = useSelector(state => state.like);\n  const [followersToggle, setFollowersToggle] = useState(false);\n  const [followingToggle, setFollowingToggle] = useState(false);\n  const [following, setFollowing] = useState(false);\n  const [isProfile, setIsProfile] = useState(false);\n  const params = useParams();\n  useEffect(() => {\n    if (user._id === params.id) {\n      setIsProfile(true);\n    }\n  }, [dispatch, user.id, params.id]);\n  useEffect(() => {\n    if (error) {\n      alert.error(error);\n      dispatch({\n        type: \"clearErrors\"\n      });\n    }\n    if (likeError) {\n      alert.error(likeError);\n      dispatch({\n        type: 'clearErrors'\n      });\n    }\n    if (message) {\n      alert.success(message);\n      dispatch({\n        type: 'clearMessage'\n      });\n    }\n    console.log(\"haaaaaaaa\");\n  }, [alert, error, likeError, message, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"ha bhai me hu\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this)\n  // loading===true || userloading===true?<Loader/>:(\n  //   <div className='account'>\n  //         <div className='accountLeft'>\n  //                {\n  //               posts && posts.length>0?posts.map((post)=>(\n  //                    <Post  \n  //                           key={post._id}\n  //                           postId={post._id}\n  //                           caption={post.caption}\n  //                           postImage={post.imageUrl.url}\n  //                           likes = {post.likes}\n  //                           comments = {post.comments}\n  //                           ownerImage={post.owner.avatar.url}\n  //                           ownerName={post.owner.name}\n  //                           ownerId={post.owner._id}\n  //                           isDelete = {true}\n  //                           isAccount = {true}\n  //                    />\n  //               )):<Typography variant='h6' margin='2vmax'>No posts available</Typography>\n  //             }\n  //         </div>\n  //         <div className='accountright'>\n  //              <Avatar src={userProfile.avatar.url}  sx={{height:\"7vmax\",width:\"7vmax\"}} marginTop={\"2vmax\"}/>\n  //              <Typography variant=\"h6\" marginTop={\"1vmax\"} color={'#3B3B3B'} marginBottom={\"2vmax\"}>{userProfile.name}</Typography>\n  //              <div className='a'>\n  //                 <button onClick={()=>setFollowingToggle(!followingToggle)}>Following {user.following.length}</button>\n  //              </div>\n  //               <div className='a'>\n  //                 <button onClick={()=>setFollowersToggle(!followersToggle)}>Followers {user.followers.length}</button>\n  //              </div>\n  //               <div className='a'>\n  //                  Posts {userProfile.posts.length}\n  //              </div>\n  //             {\n  //               isProfile?null: <Button variant=\"contained\" onClick={()=>setFollowing(!following)} style={{backgroundColor:following?\"red\":\"\"}}>{\n  //                  following?\"UnFollow\":\"Follow\"\n  //              }</Button>\n  //             }\n\n  //               {/* DialogBox for followers */}\n  //               <Dialog open={followersToggle} onClose={() => { setFollowersToggle(!followersToggle) }}>\n  //                   <div className='dialogBox'>\n  //                      <Typography variant='h6'>Followers</Typography>\n  //               {\n  //                    user && user.followers.length>0?user.followers.map((follower)=>(\n  //                         <User key={follower._id} name={follower.name} avatar={follower.avatar.url} userId={follower._id} />\n  //                    )):<Typography style={{margin:'2vmax'}}>No Followers present</Typography>\n  //               }\n  //           </div>\n  //       </Dialog>\n\n  //        {/* DialogBox for following */}\n  //               <Dialog open={followingToggle} onClose={() => { setFollowingToggle(!followingToggle) }}>\n  //                   <div className='dialogBox'>\n  //                      <Typography variant='h6'>Following</Typography>\n  //               {\n  //                    user && user.following.length>0?user.following.map((follow)=>(\n  //                         <User key={follow._id} name={follow.name} avatar={follow.avatar.url} userId={follow._id} />\n  //                    )):<Typography style={{margin:'2vmax'}}>User has not made any posts</Typography>\n  //               }\n  //           </div>\n  //       </Dialog>\n  //         </div>\n  //   </div>\n  // )\n  ;\n};\n_s(UserProfile, \"IggrnKrBqY1RxHpNQZB+emJhTvI=\", false, function () {\n  return [useDispatch, useAlert, useSelector, useSelector, useSelector, useSelector, useParams];\n});\n_c = UserProfile;\nexport default UserProfile;\nvar _c;\n$RefreshReg$(_c, \"UserProfile\");","map":{"version":3,"names":["Avatar","Button","Dialog","Typography","React","useEffect","useState","Link","useParams","Post","Loader","useDispatch","useSelector","useAlert","User","getUserProfile","jsxDEV","_jsxDEV","UserProfile","_s","dispatch","alert","user","loading","userloading","state","userProfile","userProfileloading","like","error","posts","myPost","likeError","message","deleteLoading","followersToggle","setFollowersToggle","followingToggle","setFollowingToggle","following","setFollowing","isProfile","setIsProfile","params","_id","id","type","success","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/MERN/Social_media/frontend/src/Components/UserProfile/UserProfile.jsx"],"sourcesContent":["import { Avatar, Button, Dialog, Typography } from '@mui/material';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport Post from '../Post/Post';\r\nimport Loader from '../Loader/Loader';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useAlert } from 'react-alert';\r\nimport User from '../User/User';\r\nimport { getUserProfile} from '../../Actions/Users';\r\n\r\nconst UserProfile = () => {\r\n  const dispatch=useDispatch();\r\n  const alert=useAlert();\r\n\r\n  const {user,loading:userloading}=useSelector(state=>state.user);\r\n  const {userProfile,loading:userProfileloading}=useSelector(state=>state.like);\r\n  const {loading,error,posts}=useSelector(state=>state.myPost);\r\n  const {error:likeError,message,loading: deleteLoading,}=useSelector(state=>state.like);\r\n  const [followersToggle,setFollowersToggle]=useState(false);\r\n  const [followingToggle,setFollowingToggle]=useState(false);\r\n  const [following,setFollowing]=useState(false);\r\n  const [isProfile,setIsProfile]=useState(false);\r\n  \r\n  const params=useParams();\r\n\r\n  useEffect(() => {\r\n      if(user._id===params.id){\r\n           setIsProfile(true)\r\n      }\r\n  }, [dispatch,user.id,params.id])\r\n    \r\n\r\n    useEffect(() => {\r\n         if(error){\r\n          alert.error(error);\r\n          dispatch({\r\n             type:\"clearErrors\"\r\n          })\r\n         }\r\n         if(likeError){\r\n            alert.error(likeError)\r\n            dispatch({\r\n                type:'clearErrors'\r\n            })\r\n         }\r\n         if(message){\r\n            alert.success(message)\r\n            dispatch({\r\n                type:'clearMessage'\r\n            })\r\n         }\r\n         console.log(\"haaaaaaaa\")\r\n    }, [alert,error,likeError,message,dispatch])\r\n  \r\n  return (\r\n    <h1>ha bhai me hu</h1>\r\n      // loading===true || userloading===true?<Loader/>:(\r\n      //   <div className='account'>\r\n      //         <div className='accountLeft'>\r\n      //                {\r\n      //               posts && posts.length>0?posts.map((post)=>(\r\n      //                    <Post  \r\n      //                           key={post._id}\r\n      //                           postId={post._id}\r\n      //                           caption={post.caption}\r\n      //                           postImage={post.imageUrl.url}\r\n      //                           likes = {post.likes}\r\n      //                           comments = {post.comments}\r\n      //                           ownerImage={post.owner.avatar.url}\r\n      //                           ownerName={post.owner.name}\r\n      //                           ownerId={post.owner._id}\r\n      //                           isDelete = {true}\r\n      //                           isAccount = {true}\r\n      //                    />\r\n      //               )):<Typography variant='h6' margin='2vmax'>No posts available</Typography>\r\n      //             }\r\n      //         </div>\r\n      //         <div className='accountright'>\r\n      //              <Avatar src={userProfile.avatar.url}  sx={{height:\"7vmax\",width:\"7vmax\"}} marginTop={\"2vmax\"}/>\r\n      //              <Typography variant=\"h6\" marginTop={\"1vmax\"} color={'#3B3B3B'} marginBottom={\"2vmax\"}>{userProfile.name}</Typography>\r\n      //              <div className='a'>\r\n      //                 <button onClick={()=>setFollowingToggle(!followingToggle)}>Following {user.following.length}</button>\r\n      //              </div>\r\n      //               <div className='a'>\r\n      //                 <button onClick={()=>setFollowersToggle(!followersToggle)}>Followers {user.followers.length}</button>\r\n      //              </div>\r\n      //               <div className='a'>\r\n      //                  Posts {userProfile.posts.length}\r\n      //              </div>\r\n      //             {\r\n      //               isProfile?null: <Button variant=\"contained\" onClick={()=>setFollowing(!following)} style={{backgroundColor:following?\"red\":\"\"}}>{\r\n      //                  following?\"UnFollow\":\"Follow\"\r\n      //              }</Button>\r\n      //             }\r\n\r\n      //               {/* DialogBox for followers */}\r\n      //               <Dialog open={followersToggle} onClose={() => { setFollowersToggle(!followersToggle) }}>\r\n      //                   <div className='dialogBox'>\r\n      //                      <Typography variant='h6'>Followers</Typography>\r\n      //               {\r\n      //                    user && user.followers.length>0?user.followers.map((follower)=>(\r\n      //                         <User key={follower._id} name={follower.name} avatar={follower.avatar.url} userId={follower._id} />\r\n      //                    )):<Typography style={{margin:'2vmax'}}>No Followers present</Typography>\r\n      //               }\r\n      //           </div>\r\n      //       </Dialog>\r\n\r\n      //        {/* DialogBox for following */}\r\n      //               <Dialog open={followingToggle} onClose={() => { setFollowingToggle(!followingToggle) }}>\r\n      //                   <div className='dialogBox'>\r\n      //                      <Typography variant='h6'>Following</Typography>\r\n      //               {\r\n      //                    user && user.following.length>0?user.following.map((follow)=>(\r\n      //                         <User key={follow._id} name={follow.name} avatar={follow.avatar.url} userId={follow._id} />\r\n      //                    )):<Typography style={{margin:'2vmax'}}>User has not made any posts</Typography>\r\n      //               }\r\n      //           </div>\r\n      //       </Dialog>\r\n      //         </div>\r\n      //   </div>\r\n      // )\r\n  )\r\n}\r\n\r\nexport default UserProfile;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}