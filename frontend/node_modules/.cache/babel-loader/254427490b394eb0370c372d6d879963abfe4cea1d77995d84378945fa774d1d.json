{"ast":null,"code":"var _jsxFileName = \"C:\\\\MERN\\\\Social_media\\\\frontend\\\\src\\\\Components\\\\UserProfile\\\\UserProfile.jsx\";\nimport { Avatar, Button, Dialog, Typography } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport { useAlert } from 'react-alert';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { getUserProfile } from '../../Actions/Users';\nimport Loader from '../Loader/Loader';\nimport Post from '../Post/Post';\nimport User from '../User/User';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserProfile = () => {\n  // const dispatch=useDispatch();\n  // const alert=useAlert();\n\n  // const {user:me,loading:userloading}=useSelector(state=>state.user);\n  // const {loading,error,posts}=useSelector(state=>state.myPost);\n  // const {error:likeError,message,loading: deleteLoading,}=useSelector(state=>state.like);\n  // const [followersToggle,setFollowersToggle]=useState(false);\n  // const [followingToggle,setFollowingToggle]=useState(false);\n  // const [following,setFollowing]=useState(false);\n  // const [isProfile,setIsProfile]=useState(false);\n\n  // const params=useParams();\n\n  // useEffect(() => {\n  //   dispatch(getUserProfile(params.id));\n  // }, [dispatch, params.id]);\n\n  // const {user,loading:userLoading,error:userError}=useSelector(state=>state.UserProfile);\n  // useEffect(() => {\n  //     if(me._id===params.id){\n  //          setIsProfile(true)\n  //     }\n  //     dispatch(getUserProfile(params.id))\n  // }, [dispatch,me._id,params.id])\n\n  // useEffect(() => {\n  //      if(error){\n  //       alert.error(error);\n  //       dispatch({\n  //          type:\"clearErrors\"\n  //       })\n  //      }\n  //      if(likeError){\n  //         alert.error(likeError)\n  //         dispatch({\n  //             type:'clearErrors'\n  //         })\n  //      }\n  //      if(message){\n  //         alert.success(message)\n  //         dispatch({\n  //             type:'clearMessage'\n  //         })\n  //      }\n\n  // }, [alert,error,likeError,message,dispatch])\n\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Hi\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n  // return (\n  //     loading===true || userloading===true?<Loader/>:(\n  //       <div className='account'>\n  //             <div className='accountLeft'>\n  //                    {\n  //                   posts && posts.length>0?posts.map((post)=>(\n  //                        <Post  \n  //                               key={post._id}\n  //                               postId={post._id}\n  //                               caption={post.caption}\n  //                               postImage={post.imageUrl.url}\n  //                               likes = {post.likes}\n  //                               comments = {post.comments}\n  //                               ownerImage={post.owner.avatar.url}\n  //                               ownerName={post.owner.name}\n  //                               ownerId={post.owner._id}\n  //                               isDelete = {true}\n  //                               isAccount = {true}\n  //                        />\n  //                   )):<Typography variant='h6' margin='2vmax'>No posts available</Typography>\n  //                 }\n  //             </div>\n  //             <div className='accountright'>\n  //                  <Avatar src={user.avatar.url}  sx={{height:\"7vmax\",width:\"7vmax\"}} marginTop={\"2vmax\"}/>\n  //                  <Typography variant=\"h6\" marginTop={\"1vmax\"} color={'#3B3B3B'} marginBottom={\"2vmax\"}>{user.name}</Typography>\n  //                  <div className='a'>\n  //                     <button onClick={()=>setFollowingToggle(!followingToggle)}>Following {me.following.length}</button>\n  //                  </div>\n  //                   <div className='a'>\n  //                     <button onClick={()=>setFollowersToggle(!followersToggle)}>Followers {me.followers.length}</button>\n  //                  </div>\n  //                   <div className='a'>\n  //                      Posts {user.posts.length}\n  //                  </div>\n  //                 {\n  //                   isProfile?null: <Button variant=\"contained\" onClick={()=>setFollowing(!following)} style={{backgroundColor:following?\"red\":\"\"}}>{\n  //                      following?\"UnFollow\":\"Follow\"\n  //                  }</Button>\n  //                 }\n\n  //                   {/* DialogBox for followers */}\n  //                   <Dialog open={followersToggle} onClose={() => { setFollowersToggle(!followersToggle) }}>\n  //                       <div className='dialogBox'>\n  //                          <Typography variant='h6'>Followers</Typography>\n  //                   {\n  //                        me && me.followers.length>0?me.followers.map((follower)=>(\n  //                             <User key={follower._id} name={follower.name} avatar={follower.avatar.url} userId={follower._id} />\n  //                        )):<Typography style={{margin:'2vmax'}}>No Followers present</Typography>\n  //                   }\n  //               </div>\n  //           </Dialog>\n\n  //            {/* DialogBox for following */}\n  //                   <Dialog open={followingToggle} onClose={() => { setFollowingToggle(!followingToggle) }}>\n  //                       <div className='dialogBox'>\n  //                          <Typography variant='h6'>Following</Typography>\n  //                   {\n  //                       me && me.following.length>0?me.following.map((follow)=>(\n  //                             <User key={follow._id} name={follow.name} avatar={follow.avatar.url} userId={follow._id} />\n  //                        )):<Typography style={{margin:'2vmax'}}>User has not made any posts</Typography>\n  //                   }\n  //               </div>\n  //           </Dialog>\n  //             </div>\n  //       </div>\n  //     )\n  // )\n};\n_c = UserProfile;\nexport default UserProfile;\nvar _c;\n$RefreshReg$(_c, \"UserProfile\");","map":{"version":3,"names":["Avatar","Button","Dialog","Typography","React","useEffect","useState","useAlert","useDispatch","useSelector","useParams","getUserProfile","Loader","Post","User","jsxDEV","_jsxDEV","UserProfile","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/MERN/Social_media/frontend/src/Components/UserProfile/UserProfile.jsx"],"sourcesContent":["import { Avatar, Button, Dialog, Typography } from '@mui/material';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useAlert } from 'react-alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport {\r\n  getUserProfile,\r\n} from '../../Actions/Users'\r\nimport Loader from '../Loader/Loader';\r\nimport Post from '../Post/Post';\r\nimport User from '../User/User';\r\n\r\nconst UserProfile = () => {\r\n  // const dispatch=useDispatch();\r\n  // const alert=useAlert();\r\n\r\n  // const {user:me,loading:userloading}=useSelector(state=>state.user);\r\n  // const {loading,error,posts}=useSelector(state=>state.myPost);\r\n  // const {error:likeError,message,loading: deleteLoading,}=useSelector(state=>state.like);\r\n  // const [followersToggle,setFollowersToggle]=useState(false);\r\n  // const [followingToggle,setFollowingToggle]=useState(false);\r\n  // const [following,setFollowing]=useState(false);\r\n  // const [isProfile,setIsProfile]=useState(false);\r\n  \r\n  // const params=useParams();\r\n  \r\n  // useEffect(() => {\r\n  //   dispatch(getUserProfile(params.id));\r\n  // }, [dispatch, params.id]);\r\n  \r\n  // const {user,loading:userLoading,error:userError}=useSelector(state=>state.UserProfile);\r\n  // useEffect(() => {\r\n  //     if(me._id===params.id){\r\n  //          setIsProfile(true)\r\n  //     }\r\n  //     dispatch(getUserProfile(params.id))\r\n  // }, [dispatch,me._id,params.id])\r\n    \r\n\r\n    // useEffect(() => {\r\n    //      if(error){\r\n    //       alert.error(error);\r\n    //       dispatch({\r\n    //          type:\"clearErrors\"\r\n    //       })\r\n    //      }\r\n    //      if(likeError){\r\n    //         alert.error(likeError)\r\n    //         dispatch({\r\n    //             type:'clearErrors'\r\n    //         })\r\n    //      }\r\n    //      if(message){\r\n    //         alert.success(message)\r\n    //         dispatch({\r\n    //             type:'clearMessage'\r\n    //         })\r\n    //      }\r\n    \r\n    // }, [alert,error,likeError,message,dispatch])\r\n  \r\n\r\n  return (\r\n    <h1>Hi</h1>\r\n  )\r\n  // return (\r\n  //     loading===true || userloading===true?<Loader/>:(\r\n  //       <div className='account'>\r\n  //             <div className='accountLeft'>\r\n  //                    {\r\n  //                   posts && posts.length>0?posts.map((post)=>(\r\n  //                        <Post  \r\n  //                               key={post._id}\r\n  //                               postId={post._id}\r\n  //                               caption={post.caption}\r\n  //                               postImage={post.imageUrl.url}\r\n  //                               likes = {post.likes}\r\n  //                               comments = {post.comments}\r\n  //                               ownerImage={post.owner.avatar.url}\r\n  //                               ownerName={post.owner.name}\r\n  //                               ownerId={post.owner._id}\r\n  //                               isDelete = {true}\r\n  //                               isAccount = {true}\r\n  //                        />\r\n  //                   )):<Typography variant='h6' margin='2vmax'>No posts available</Typography>\r\n  //                 }\r\n  //             </div>\r\n  //             <div className='accountright'>\r\n  //                  <Avatar src={user.avatar.url}  sx={{height:\"7vmax\",width:\"7vmax\"}} marginTop={\"2vmax\"}/>\r\n  //                  <Typography variant=\"h6\" marginTop={\"1vmax\"} color={'#3B3B3B'} marginBottom={\"2vmax\"}>{user.name}</Typography>\r\n  //                  <div className='a'>\r\n  //                     <button onClick={()=>setFollowingToggle(!followingToggle)}>Following {me.following.length}</button>\r\n  //                  </div>\r\n  //                   <div className='a'>\r\n  //                     <button onClick={()=>setFollowersToggle(!followersToggle)}>Followers {me.followers.length}</button>\r\n  //                  </div>\r\n  //                   <div className='a'>\r\n  //                      Posts {user.posts.length}\r\n  //                  </div>\r\n  //                 {\r\n  //                   isProfile?null: <Button variant=\"contained\" onClick={()=>setFollowing(!following)} style={{backgroundColor:following?\"red\":\"\"}}>{\r\n  //                      following?\"UnFollow\":\"Follow\"\r\n  //                  }</Button>\r\n  //                 }\r\n\r\n  //                   {/* DialogBox for followers */}\r\n  //                   <Dialog open={followersToggle} onClose={() => { setFollowersToggle(!followersToggle) }}>\r\n  //                       <div className='dialogBox'>\r\n  //                          <Typography variant='h6'>Followers</Typography>\r\n  //                   {\r\n  //                        me && me.followers.length>0?me.followers.map((follower)=>(\r\n  //                             <User key={follower._id} name={follower.name} avatar={follower.avatar.url} userId={follower._id} />\r\n  //                        )):<Typography style={{margin:'2vmax'}}>No Followers present</Typography>\r\n  //                   }\r\n  //               </div>\r\n  //           </Dialog>\r\n\r\n  //            {/* DialogBox for following */}\r\n  //                   <Dialog open={followingToggle} onClose={() => { setFollowingToggle(!followingToggle) }}>\r\n  //                       <div className='dialogBox'>\r\n  //                          <Typography variant='h6'>Following</Typography>\r\n  //                   {\r\n  //                       me && me.following.length>0?me.following.map((follow)=>(\r\n  //                             <User key={follow._id} name={follow.name} avatar={follow.avatar.url} userId={follow._id} />\r\n  //                        )):<Typography style={{margin:'2vmax'}}>User has not made any posts</Typography>\r\n  //                   }\r\n  //               </div>\r\n  //           </Dialog>\r\n  //             </div>\r\n  //       </div>\r\n  //     )\r\n  // )\r\n}\r\n\r\nexport default UserProfile"],"mappings":";AAAA,SAASA,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,UAAU,QAAQ,eAAe;AAClE,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SACEC,cAAc,QACT,qBAAqB;AAC5B,OAAOC,MAAM,MAAM,kBAAkB;AACrC,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,IAAI,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EACxB;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAGF,oBACED,OAAA;IAAAE,QAAA,EAAI;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAK;EAEb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;AAAAC,EAAA,GAxHKN,WAAW;AA0HjB,eAAeA,WAAW;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}