{"ast":null,"code":"import axios from 'axios';\n\n// for likepost\nexport const likePost = id => async dispatch => {\n  try {\n    dispatch({\n      type: 'likeRequest'\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/post/${id}`);\n    dispatch({\n      type: 'likeSuccess',\n      payload: data.message\n    });\n  } catch (error) {\n    dispatch({\n      type: 'likeFailure',\n      payload: error.response.data.message\n    });\n  }\n};\n\n// for comments\nexport const commentOnPost = (id, comment) => async dispatch => {\n  try {\n    dispatch({\n      type: 'commentRequest'\n    });\n    const {\n      data\n    } = await axios.put(`/api/v1/post/comment/${id}`, {\n      comment\n    }, {\n      headers: {\n        \"Content-Type\": \"Application/json\"\n      }\n    });\n    dispatch({\n      type: 'commentSuccess',\n      payload: data.message\n    });\n  } catch (error) {\n    dispatch({\n      type: 'commentFailure',\n      payload: error.response.data.message\n    });\n  }\n};\n\n// for deleteComment\nexport const deleteComment = (id, commentId) => async dispatch => {\n  try {\n    dispatch({\n      type: 'deleteRequest'\n    });\n    console.log(\"sldkf\", id, commentId);\n    const {\n      data\n    } = await axios.delete(`/api/v1/post/comment/${id}`, {\n      data: {\n        commentId\n      }\n    });\n    dispatch({\n      type: 'deleteSuccess',\n      payload: data.message\n    });\n  } catch (error) {\n    dispatch({\n      type: 'deleteFailure',\n      payload: error.response.data.message\n    });\n  }\n};\n\n// for Post \nexport const createNewPost = (caption, image) => async dispatch => {\n  try {\n    dispatch({\n      type: 'newPostRequest'\n    });\n    const {\n      data\n    } = await axios.post(`/api/v1/post/upload`, {\n      caption,\n      image\n    });\n    dispatch({\n      type: 'newPostSuccess',\n      payload: data.message\n    });\n  } catch (error) {\n    dispatch({\n      type: 'newPostFailure',\n      payload: error.response.data.message\n    });\n  }\n};\n\n// update Post\nexport const updateCaption = (caption, id) => async dispatch => {\n  try {\n    dispatch({\n      type: 'updateCaptionRequest'\n    });\n    const data = await axios.put(`/api/v1/post/${id}`, {\n      caption\n    });\n    dispatch({\n      type: 'updateCaptionSuccess',\n      payload: data.message\n    });\n  } catch (error) {\n    dispatch({\n      type: 'updateCaptionFailure',\n      payload: error.message\n    });\n  }\n};\n\n// delete Post\nexport const deletePost = id => async dispatch => {\n  try {\n    dispatch({\n      type: 'deletePostRequest'\n    });\n    const {\n      data\n    } = await axios.delete(`/api/v1/post/${id}`);\n    dispatch({\n      type: 'deletePostSuccess',\n      payload: data.message\n    });\n  } catch (error) {\n    dispatch({\n      type: 'deletePostFailure',\n      payload: error.response.data.message\n    });\n  }\n};","map":{"version":3,"names":["axios","likePost","id","dispatch","type","data","get","payload","message","error","response","commentOnPost","comment","put","headers","deleteComment","commentId","console","log","delete","createNewPost","caption","image","post","updateCaption","deletePost"],"sources":["C:/MERN/Social_media/frontend/src/Actions/Post.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// for likepost\r\nexport const likePost=(id)=>async(dispatch)=>{\r\n      try {\r\n          dispatch({\r\n            type:'likeRequest',\r\n          })\r\n         \r\n          const {data}= await axios.get(`/api/v1/post/${id}`);\r\n          \r\n          dispatch({\r\n            type:'likeSuccess',\r\n            payload:data.message,\r\n          })\r\n\r\n      } catch (error) {\r\n          dispatch({\r\n             type:'likeFailure',\r\n             payload:error.response.data.message\r\n          })\r\n      }\r\n}\r\n\r\n// for comments\r\nexport const commentOnPost=(id,comment)=>async(dispatch)=>{\r\n      try {\r\n          dispatch({\r\n            type:'commentRequest',\r\n          })\r\n\r\n          const {data}= await axios.put(`/api/v1/post/comment/${id}`,{comment},{headers:{\r\n            \"Content-Type\":\"Application/json\"\r\n          }});\r\n         \r\n          dispatch({\r\n            type:'commentSuccess',\r\n            payload:data.message,\r\n          })\r\n\r\n      } catch (error) {\r\n          dispatch({\r\n             type:'commentFailure',\r\n             payload:error.response.data.message\r\n          })\r\n      }\r\n}\r\n\r\n// for deleteComment\r\nexport const deleteComment=(id,commentId)=>async(dispatch)=>{\r\n      try {\r\n          dispatch({\r\n            type:'deleteRequest',\r\n          })\r\n          \r\n          console.log(\"sldkf\",id,commentId)\r\n          const {data}= await axios.delete(`/api/v1/post/comment/${id}`,{data:{commentId}});\r\n         \r\n\r\n          dispatch({\r\n            type:'deleteSuccess',\r\n            payload:data.message,\r\n          })\r\n\r\n      } catch (error) {\r\n          dispatch({\r\n             type:'deleteFailure',\r\n             payload:error.response.data.message\r\n          })\r\n      }\r\n}\r\n\r\n// for Post \r\nexport const createNewPost=(caption,image)=>async(dispatch)=>{\r\n      try {\r\n          dispatch({\r\n            type:'newPostRequest',\r\n          })\r\n          \r\n          const {data}= await axios.post(`/api/v1/post/upload`,{\r\n                caption,image\r\n          });\r\n        \r\n          dispatch({\r\n            type:'newPostSuccess',\r\n            payload:data.message,\r\n          })\r\n\r\n      } catch (error) {\r\n          dispatch({\r\n             type:'newPostFailure',\r\n             payload:error.response.data.message\r\n          })\r\n      }\r\n}\r\n\r\n// update Post\r\nexport const updateCaption=(caption,id)=>async(dispatch)=>{\r\n     try {\r\n          dispatch({\r\n            type:'updateCaptionRequest'\r\n          })\r\n         \r\n        \r\n          const data=await axios.put(`/api/v1/post/${id}`,{\r\n            caption,\r\n          })\r\n\r\n        \r\n          dispatch({\r\n            type:'updateCaptionSuccess',\r\n            payload:data.message\r\n          })\r\n     } catch (error) {\r\n         dispatch({\r\n            type:'updateCaptionFailure',\r\n            payload:error.message\r\n         })\r\n     }\r\n}\r\n\r\n// delete Post\r\nexport const deletePost=(id)=>async(dispatch)=>{\r\n  try {\r\n      dispatch({\r\n        type:'deletePostRequest'\r\n      })\r\n\r\n    const {data}=await axios.delete(`/api/v1/post/${id}`) \r\n\r\n      dispatch({\r\n        type:'deletePostSuccess',\r\n        payload:data.message\r\n      })\r\n  } catch (error) {\r\n        dispatch({\r\n          type:'deletePostFailure',\r\n          payload:error.response.data.message\r\n        })\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}